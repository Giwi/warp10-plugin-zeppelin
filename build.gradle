//
//   Copyright 2018  SenX S.A.S.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//

// Apply the java plugin to add support for Java
plugins {
    id 'java'
    id 'eclipse'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id 'idea'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.8.1'
}

// ------------------------------------------------------------------
//                    AUTO RELEASE MANAGEMENT
// Gets the version name from the latest Git tag
// if no commit occurs -> the name of the tag likes 0.0.1
// if commit occurs -> 0.0.1-12-aabb1122 (number of commits + version number)
// ------------------------------------------------------------------
def getVersionName(String revision) {
  String newRevision = revision

  if (!revision.endsWith('SNAPSHOT')) {
    def stdout = new ByteArrayOutputStream()
    exec {
      commandLine 'git', 'describe', '--tags', '--always'
      standardOutput = stdout
    }
    newRevision = stdout.toString().trim()
  }
  return newRevision
}

project.ext.bintrayRepo = 'REPO'
project.ext.bintrayVcsUrl = 'VCS URL'
project.ext.bintrayLicenses = [ 'LICENSE' ]
project.ext.group = 'io.warp10'
project.ext.name = 'warp10-plugin-zeppelin'
project.ext.uberjar = null != System.getProperty('uberjar')
project.ext.version = getVersionName('0.0.1') + (project.ext.uberjar ? '-uberjar' : '')
version project.ext.version
// In this section you declare where to find the dependencies of your project
repositories {
    // flatDir name:'ExternalJars', dirs:'./lib'
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    
    maven {
      url 'https://dl.bintray.com/senx/maven'
    }
    
    maven {
      url 'https://dl.bintray.com/hbs/maven'
    }
        
    mavenCentral()
    
    mavenLocal()
    
    maven {
      url "http://maven.twttr.com"
    }
}

configurations {
    provided
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    provided 'org.slf4j:slf4j-api:1.7.13'
    provided 'io.warp10:warpscript:2.0.1'

    compile 'org.apache.zeppelin:zeppelin-interpreter:0.8.0'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.

    testCompile 'junit:junit:4.12'
}

sourceSets {
  main {
    compileClasspath = compileClasspath + configurations.provided
  }
}
// for IntelliJ users
idea {
  module {
    scopes.PROVIDED.plus += [configurations.provided]
  }
}

shadowJar {
  zip64 = true
  classifier = ''
  manifest {
    attributes("Implementation-Title": "Warp 10 Zeppelin Plugin")
    attributes("Implementation-Version": project.ext.version)
    attributes('WarpFleet-Description': 'Integrating Warp 10â„¢ with Apache Zeppelin')
    attributes('WarpFleet-Group': project.ext.group )
    attributes('WarpFleet-Artifact': project.ext.name)
    attributes('WarpFleet-Version': project.ext.version)
  }
  dependencies {
    exclude(dependency('io.warp10:warpscript:'))
    exclude(dependency('org.slf4j::'))
  }
}

task shadowJarFull(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
  zip64 = true
  group = 'Shadow'
  classifier = 'full'
  from(project.convention.getPlugin(JavaPluginConvention).sourceSets.main.output)
  configurations = [project.configurations.provided ]//,project.configurations.compile]
  manifest {
    attributes("Implementation-Title": "Warp 10 Zeppelin Plugin")
    attributes("Implementation-Version": "0.0.1")
  }
  dependencies {
    exclude(dependency('org.renjin:renjin-script-engine:'))
  }
}

// Task for building the sources jar
task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allJava
}

eclipse {
  classpath {
    plusConfigurations += [ configurations.provided ]
  }
}


bintray {
  dryRun = false

  user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
  key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

  publications = project.ext.uberjar ? [ 'uberjar' ] : ['stdjar' ]
  publish = false

  pkg {

    repo = project.ext.bintrayRepo
    name = project.ext.name

    if (project.hasProperty('bintrayUserOrg') || null != System.getenv('BINTRAY_USERORG')) {
      userOrg = project.hasProperty('bintrayUserOrg') ? project.property('bintrayUserOrg') : System.getenv('BINTRAY_USERORG')
    }

    vcsUrl = project.ext.bintrayVcsUrl
    licenses = project.ext.bintrayLicenses

    version {
      version = version
      released = new Date()
    }
  }
}